include "wasm4.porth"

memory gamepad-state sizeof(u8)   end
memory frame-count   sizeof(int)  end
memory player        sizeof(bool) end
memory gamepad       sizeof(ptr)  end

const WINDOW_SIZE 160 end
const FONT_CENTER 4 end
const DELTA_TIME  2 end
const CHARS " XO"c end

const CELL_SIZE  14 end
const CELL_BORDER 1 end
const CELL_BOUNDS CELL_SIZE CELL_BORDER - end
const CELL_FONT_CENTER CELL_BOUNDS 2 divmod drop 1 + FONT_CENTER - end

const COLL 3 end
const ROWS 3 end

const BORDER_SIZE 4 end
const BORDER_WIDTH_OFFSET  BORDER_SIZE COLL 1 - * end
const BORDER_HEIGHT_OFFSET BORDER_SIZE ROWS 1 - * end

const BOARD_WIDTH  CELL_SIZE COLL * end
const BOARD_HEIGHT CELL_SIZE ROWS * end

const GRID_WIDTH  BOARD_WIDTH  COLL * BORDER_WIDTH_OFFSET  + end
const GRID_HEIGHT BOARD_HEIGHT ROWS * BORDER_HEIGHT_OFFSET + end

const GRID_OFFSET.X WINDOW_SIZE GRID_WIDTH  - 2 divmod drop end
const GRID_OFFSET.Y WINDOW_SIZE GRID_HEIGHT - 2 divmod drop end

const BOARD_CELLS COLL ROWS * end

const cell.value sizeof(int)     offset end
const cell.coord sizeof(int) 2 * offset end
const sizeof(cell) reset end

const board.cells BOARD_CELLS sizeof(cell) * offset end
const board.status sizeof(int) offset end
const sizeof(board) reset end

const sizeof(grid) BOARD_CELLS sizeof(board) * end

memory grid sizeof(grid) end
memory highlighted sizeof(ptr) end
memory current-board sizeof(ptr) end

inline proc coord(i)   int -- int int in COLL divmod swap end
inline proc index(x,y) int int -- int in COLL * + end

inline proc board(i)   int     -- ptr in sizeof(board) * grid +ptr end
inline proc board(x,y) int int -- ptr in index(x,y) board(i) end

inline proc @board.cell(i)   ptr int     -- ptr in sizeof(cell) * ptr+ end
inline proc @board.cell(x,y) ptr int int -- ptr in index(x,y) @board.cell(i) end

proc cell(x,y) int int -- ptr in
  ROWS divmod swap rot
  COLL divmod swap rot
  board(x,y) rot rot 
  swap @board.cell(x,y)
end

inline proc cell(i) int -- ptr in COLL COLL * divmod swap cell(x,y) end

inline proc @board.index ptr -- int     in cast(int) grid cast(int) - sizeof(board) / end
inline proc @board.coord ptr -- int int in @board.index coord(i) end
inline proc @board       ptr -- ptr     in @board.index board(i) end

inline proc !coord int int ptr in 
  cell.coord  ptr+ swap over 
  sizeof(int) ptr+ 
  !int !int 
end

inline proc @coord ptr -- int int in 
  cell.coord  ptr+ dup @int swap 
  sizeof(int) ptr+ @int 
end

inline proc @index        ptr -- int     in @coord index(x,y) end
inline proc @inboardCoord ptr -- int int in @coord ROWS % swap COLL % swap end
inline proc @drawOffset   ptr -- int int in @inboardCoord swap CELL_SIZE * swap CELL_SIZE * end
inline proc @nextBoard    ptr -- ptr     in @inboardCoord index(x,y) board(i) end

inline proc !PALETTE int int in 4 % 4 * $PALETTE0 +ptr !int end
inline proc !COLORS      int in $DRAW_COLORS !16 end
inline proc @GAMEPAD  -- int in gamepad @ptr @8 end

inline proc frame-count++ in frame-count @int 1 + frame-count !int end
inline proc reset-control-state in 0 gamepad-state !8 end

proc player-toggle in
  player dup @bool if
    $GAMEPAD2
  else
    $GAMEPAD1
  end
  gamepad !ptr
  toggle
end

proc create-grid in  
  0 while dup BOARD_CELLS BOARD_CELLS * < do dup dup 
    COLL COLL * 
    divmod swap 
    rot cell(i)
    !coord  1 +
  end drop
end

proc reset-highlight in
  current-board @ptr ?null if
    BOARD_CELLS 2 / board(i)
  else
    current-board @ptr
  end
  BOARD_CELLS 2 % 1 = if
    BOARD_CELLS 2 / 
  else 0 end 
  @board.cell(i) 
  highlighted !ptr
end

proc main in
  0x28000e 0 !PALETTE
  0x641010 1 !PALETTE
  0x734940 2 !PALETTE
  0xbba075 3 !PALETTE

  player-toggle
  create-grid
  reset-highlight
end

proc update-current-board in
  highlighted @ptr @nextBoard dup
  board.status ptr+ @int 0 = if
    current-board !ptr
  else drop 
    NULL current-board !ptr
  end
  reset-highlight
end

proc place-and-update in
  highlighted @ptr ?null lnot
  highlighted @ptr @int  0 =  land if
    // current-board @ptr dup ?null swap 
    // highlighted   @ptr @board ptr= lor if
    player @bool cast(int) 1 +
    highlighted @ptr !int
    update-current-board
    player-toggle
    // end
  end
end

proc clamp-wrap int int int -- int in
  swap 1 = 
  let pos gridSize isPositive in
    gridSize 1 - 0
    isPositive if swap end
    pos = lnot if drop
      pos 1 isPositive 
      if + else - end 
    end
  end
end

proc input-dir int int in
  highlighted @ptr ?null if drop drop
    reset-highlight
  else
    let xDir yDir in
      yDir 0 != if
        highlighted @ptr @coord 
        yDir ROWS ROWS * clamp-wrap
        cell(x,y) highlighted !ptr
      else xDir 0 != if*
        highlighted @ptr @coord swap 
        xDir COLL COLL * clamp-wrap swap
        cell(x,y) highlighted !ptr
      end
    end
  end
end

proc update-state int ptr -- int in
  let keys prev-state in
    keys prev-state @8 xor keys and
    keys prev-state !8
  end
end

proc check-keys in
  @GAMEPAD gamepad-state update-state
  peek pressed in 0 != if 
    pressed $BUTTON_1 and cast(bool)
    pressed $BUTTON_2 and cast(bool) lor if
      place-and-update
    end  pressed $BUTTON_LEFT  and cast(bool) if  2 0 
    else pressed $BUTTON_RIGHT and cast(bool) if* 1 0 
    else pressed $BUTTON_DOWN  and cast(bool) if* 0 1 
    else pressed $BUTTON_UP    and cast(bool) if* 0 2
    else 0 0 end
    input-dir
  end end
end

proc draw-current-board in
  current-board @ptr ?null lnot if
    0x0004 !COLORS
    BOARD_HEIGHT BORDER_SIZE + CELL_BORDER -
    BOARD_WIDTH  BORDER_SIZE + CELL_BORDER -
    current-board @ptr 
    @board.coord  swap
    GRID_OFFSET.Y rot BORDER_SIZE BOARD_HEIGHT + * + BORDER_SIZE 2 / -
    GRID_OFFSET.X rot BORDER_SIZE BOARD_WIDTH  + * + BORDER_SIZE 2 / -
    rect
  end
end

proc draw-cell int int ptr in
  let ix iy cell in 
    cell @drawOffset
    iy + swap ix +
    let y x in
      cell highlighted @ptr ptr= if
        0x0024
      else
        0x0023
      end
      !COLORS

      CELL_BOUNDS dup y x rect

      cell @int 0 != if 0x0001 !COLORS
        y CELL_FONT_CENTER +
        x CELL_FONT_CENTER +
        1
        CHARS cell @int ptr+
        textUtf8
      end
    end
  end
end

proc draw-board ptr in
  peek board in
    @board.coord
    BORDER_SIZE BOARD_HEIGHT + * GRID_OFFSET.Y + swap
    BORDER_SIZE BOARD_WIDTH  + * GRID_OFFSET.X + 
    let y x in
      0 while dup BOARD_CELLS < do
        board over @board.cell(i)
        x y rot
        draw-cell
        1 +
      end drop
    end
  end
end

proc draw-grid in
  0 while dup BOARD_CELLS < do
    dup board(i)
    draw-board
    1 +
  end drop
end

proc update in
  frame-count++

  frame-count @int DELTA_TIME 2 * % 0 = if
    reset-control-state
  else frame-count @int DELTA_TIME % 0 = if*
    check-keys
  end

  draw-current-board
  draw-grid

  0x0004 !COLORS
  3 56 1 CHARS player @bool cast(int) 1 + ptr+ textUtf8
  3 63 " Turn"c text
end