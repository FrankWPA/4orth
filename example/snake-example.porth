include "wasm4.porth"

// Game state
memory frame-count sizeof(int) end
memory prev-state sizeof(u8) end

// Snake variables
memory length sizeof(int) end
memory dirx sizeof(int) end
memory diry sizeof(int) end
memory snake sizeof(int) 2 * 32 * end

// Fruit variables
memory fruit 8 end
memory fruit-sprite 16 end

// Helper pointer offsets
inline proc ++ ptr in inc32 end
inline proc x+ ptr -- ptr in end 
inline proc y+ ptr -- ptr in 4 ptr+ end 
inline proc snake+ ptr int -- ptr in 8 * ptr+ end
inline proc snake++ ptr -- ptr in 1 snake+ end

// Helper inline procs
inline proc rnd-coord -- int int in 20 rnd 20 rnd end
inline proc new-fruit in rnd-coord fruit x+ !int fruit y+ !int end
inline proc ptr> ptr ptr -- bool in swap cast(int) swap cast(int) > end

inline proc @gamepad   -- int in $GAMEPAD1 cast(ptr) @8 end
inline proc @snake-end -- ptr in snake length @int 8 * ptr+ end

// Return the wrapped snake coord around the screen given its position and direction
inline proc clamp-wrap int int -- int in
  1 = if   dup 19 = if drop  0 else 1 + 
  end else dup  0 = if drop 19 else 1 - end end
end

proc main in
  // Color palette setting
  0x151640 $PALETTE0 cast(ptr) !int
  0x3f6d9e $PALETTE1 cast(ptr) !int
  0xf783b0 $PALETTE2 cast(ptr) !int
  0xe6f2ef $PALETTE3 cast(ptr) !int

  // 8 x 8 Fruit sprite in 2BPP (2 bits per pixel)
  0x2A000     fruit-sprite !int
  0x5C36F00E  fruit-sprite 4  ptr+ !int
  0x57D557D6  fruit-sprite 8  ptr+ !int
  0xF00F5C35  fruit-sprite 12 ptr+ !int

  // Initialize fruit in a random position
  new-fruit

  // Initialize snake body and direction
  1 dirx           !int
  3 length         !int
  2 snake          !int
  1 snake 1 snake+ !int
  0 snake 2 snake+ !int
end

// Change snake direction based on input xdir and ydir.
//If value is 1 it's positive, otherwise it's negative
proc snake-dir int int in 
  dup 
  0 != dirx @int 0 = land if
      dirx !int
    0 diry !int drop
  else drop dup 
  0 != diry @int 0 = land if*
        diry !int
      0 dirx !int
  else drop end
end

// Compare current pressed keys with keys pressed in the last checked frame and calls snake-dir
proc check-keys in
  memory gamepad sizeof(int) end

  @gamepad dup dup
  prev-state @8 xor and swap
  prev-state !8

  dup 0 != if dup
    $BUTTON_UP    and 0 != if  2
    0 else dup
    $BUTTON_DOWN  and 0 != if* 1
    0 else 0 over
    $BUTTON_RIGHT and 0 != if* 1 
    else over
    $BUTTON_LEFT  and 0 != if* 2
    else 0 end 
    snake-dir drop
  else drop end
end

// Update every part of the snake body to its new position
proc snake-update in
  memory n sizeof(ptr) end

  snake x+ @int 
  snake y+ @int
  snake snake++
  while dup @snake-end ptr< do n !ptr
    n @ptr x+ @int
    n @ptr y+ @int rot
    n @ptr y+ !int rot
    n @ptr x+ !int
    n @ptr snake++
  end drop drop drop

  dirx @int 0 != if
    snake x+ @int dirx @int
    clamp-wrap
    snake x+ !int
  else diry @int 0 != if*
    snake y+ @int diry @int
    clamp-wrap
    snake y+ !int
  end
end

// Check if the snake head is colliding with the fruit.
// Incrementing the snake and generating a new fruit if true.
proc check-fruit in
  snake x+ @int fruit x+ @int =
  snake y+ @int fruit y+ @int = land if
    length ++
    new-fruit
  end
end

// Draw a 8 x 8 rectangle in a given coord
proc draw-rect int int in
  memory x sizeof(int) end
  memory y sizeof(int) end
  y !int x !int
  8 8
  y @int 8 *
  x @int 8 *
  rect
end

// Draws all parts of the snake
proc snake-draw in
  0x0004 $DRAW_COLORS cast(ptr) !16

  snake x+ @int
  snake y+ @int
  draw-rect

  0x0043 $DRAW_COLORS cast(ptr) !16

  @snake-end snake 
  while snake++ over over ptr> do 
    dup  cast(ptr) x+ @int
    over cast(ptr) y+ @int draw-rect
  end drop drop
end

// Draws the fruit sprite
proc fruit-draw in
  0x4320 $DRAW_COLORS cast(ptr) !16
  1 8 8 
  fruit y+ @int 8 *
  fruit x+ @int 8 *
  fruit-sprite
  blit
end

// Gameloop
proc update in
  frame-count ++

  // Only do checks and updates every 5 frames
  frame-count @int 5 % 0 = if
    check-keys
    check-fruit
    snake-update
  end

  fruit-draw
  snake-draw
end