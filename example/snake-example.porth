include "wasm4.porth"

// Game state
memory frame-count sizeof(int) end
memory prev-state  sizeof(u8)  end

inline proc frame-count++ in frame-count @int 1 + frame-count !int end

// Game consts
const sizeof(coord) sizeof(int) 2 * end
const sizeof(cell)   8 end
const sizeof(grid)  20 end
const delta_time     5 end 
const SNAKE_CAP     32 end

// Helper pointer offsets
inline proc x+ ptr -- ptr in end 
inline proc y+ ptr -- ptr in sizeof(int) ptr+ end
inline proc !x int ptr in !int end
inline proc !y int ptr in y+ !int end
inline proc @x ptr -- int in @int end
inline proc @y ptr -- int in y+ @int end

inline proc snake+  ptr int -- ptr in sizeof(coord) * ptr+ end
inline proc snake++ ptr     -- ptr in 1 snake+ end

// Snake values
const snake.length sizeof(int)   offset end
const snake.dir    sizeof(coord) offset end
const snake.body   sizeof(coord) SNAKE_CAP * offset end
const sizeof(snake) reset end

memory snake sizeof(snake) end

// Snake values setters and getters
inline proc @snake-length -- int in snake snake.length ptr+ @int end
inline proc !snake-length    int in snake snake.length ptr+ !int end
inline proc length++ in @snake-length 1 + !snake-length end

inline proc snake-head -- ptr in snake snake.body ptr+ end
inline proc snake-tail -- ptr in snake-head @snake-length sizeof(coord) * ptr+ end

inline proc snake-dir   -- ptr in snake snake.dir ptr+ end
inline proc !snake-dir int int in snake-dir !y snake-dir !x end

inline proc ?movingx -- bool in snake-dir @x 0 != end
inline proc ?movingy -- bool in snake-dir @y 0 != end

// Fruit values
memory fruit sizeof(coord) end

const fruit-sprite "\\00\\a0\\02\\00\\0e\\f0\\36\\5c\\d6\\57\\d5\\57\\35\\5c\\0f\\f0"c end
const fruit-flags $BLIT_2BPP end
const fruit-height 8 end
const fruit-width  8 end

// Helper inline procs
inline proc rnd-coord -- int int in 20 rnd 20 rnd end
inline proc new-fruit in rnd-coord fruit !x fruit !y end
inline proc ptr> ptr ptr -- bool in swap ptr< end

// Wasm4 memory getters and setters
inline proc !PALETTE int int in 4 % 4 * $PALETTE0 cast(ptr) +ptr !int end
inline proc !COLORS int in $DRAW_COLORS cast(ptr) !16 end
inline proc @GAMEPAD -- int in $GAMEPAD1 cast(ptr) @8 end

// Return the wrapped snake position around the screen given its position and direction
proc clamp-wrap int int -- int in
  memory up sizeof(bool) end
  1 = up !bool
  memory val sizeof(int) end
  val !int

  sizeof(grid) 1 - 0       //screen limits
  up @bool if swap end     //check based on direction
  val @int = lnot if drop  //if not at the limits, just increment/decrement
    val @int 1 
    up  @bool 
    if + else - end 
  end
end

proc main in
  // Color palette setting
  0x151640 0 !PALETTE
  0x3f6d9e 1 !PALETTE
  0xf783b0 2 !PALETTE
  0xe6f2ef 3 !PALETTE

  // Initialize fruit in a random position
  new-fruit

  // Initialize snake body and direction
  1 0 !snake-dir
  3 !snake-length

  @snake-length snake-head 
  while over 0 > do
    over over !x
    10   over !y
    swap 1 -
    swap snake++
  end drop drop
end

// Change snake direction based on input xdir and ydir.
// If value is 1 it's positive, otherwise it's negative
proc input-dir int int in
  dup 
  0 != ?movingx land if 
    !snake-dir
  else over 
  0 != ?movingy land if*
    !snake-dir
  else drop drop end
end

// Compare current pressed keys with keys pressed in the last checked frame and calls input-dir
proc check-keys in
  memory gamepad sizeof(int) end

  @GAMEPAD dup dup
  prev-state @8 xor and swap
  prev-state !8

  dup 0 != if dup
    $BUTTON_LEFT  and 0 != if  2 0 
    else dup
    $BUTTON_RIGHT and 0 != if* 1 0 
    else dup
    $BUTTON_DOWN  and 0 != if* 0 1 
    else dup
    $BUTTON_UP    and 0 != if* 0 2
    else 0 0
    end input-dir drop
  else drop end
end

// Update every part of the snake body to its new position
proc snake-update in
  memory snake* sizeof(ptr) end

  snake-head @x 
  snake-head @y
  snake-head 
  while snake++ dup snake-tail ptr< do snake* !ptr
    snake* @ptr @x
    snake* @ptr @y rot
    snake* @ptr !y rot
    snake* @ptr !x
    snake* @ptr 
  end drop drop drop

  ?movingx if
    snake-head @x snake-dir @x
    clamp-wrap
    snake-head !x
  else ?movingy if*
    snake-head @y snake-dir @y
    clamp-wrap
    snake-head !y
  end
end

// Check if the snake head is colliding with the fruit.
// Incrementing the snake and generating a new fruit if true.
proc check-fruit in
  snake-head @x fruit @x =
  snake-head @y fruit @y = land if
    length++
    new-fruit
  end
end

// Draw a 8 x 8 rectangle in a given coord
proc draw-rect int int in
  memory x sizeof(int) end
  memory y sizeof(int) end
  y !int x !int
  sizeof(cell) dup
  y @int sizeof(cell) *
  x @int sizeof(cell) *
  rect
end

// Draws all parts of the snake
proc snake-draw in
  0x0004 !COLORS

  snake-head @x
  snake-head @y
  draw-rect

  0x0043 !COLORS

  snake-tail snake-head 
  while snake++ over over ptr> do 
    dup  @x
    over @y draw-rect
  end drop drop
end

// Draws the fruit sprite
proc fruit-draw in
  0x4320 !COLORS
  fruit-flags 
  fruit-height
  fruit-width
  fruit @y sizeof(cell) *
  fruit @x sizeof(cell) *
  fruit-sprite
  blit
end

// Gameloop
proc update in
  frame-count++

  // Only do checks and updates every `delta_time` frames
  frame-count @int delta_time % 0 = if
    check-keys
    check-fruit
    snake-update
  end

  fruit-draw
  snake-draw
end