// The porth to wasm compiler implemented over a modified Porth implementation.

include "4std.porth"
include "porth-4ork.porth"

proc generate-op-comment ptr ptr in
  let op bfd in
    op Op.type    ptr+ @int
    op Op.operand ptr+ @int
    op Op.token   ptr+
    let type operand token in
      " ;; "                      bfd bputs
      type OP_INTRINSIC = if
       token Token.text ptr+ @Str bfd bputs
      else 
        type op-type-as-str       bfd bputs
        " "                       bfd bputs
        operand                   bfd bputu
      end
      "\n"                        bfd bputs
    end
  end
end

const wat-string-section  6560    end // 0x19a0
const sizeof(wasm4-cart)  65535   end // 0xffff
const sizeof(porth-stack) 64 64 * end // 0x1000

const wat-porth-stack sizeof(wasm4-cart) sizeof(porth-stack) - end

memory wat-global-mem sizeof(int) end
memory skip-inline sizeof(bool) end
memory skip-op sizeof(int) end

memory proc-layers sizeof(int) OPS_CAP * end
memory proc-index  sizeof(int) end

inline proc proc-get  int -- int in sizeof(int) * proc-layers +ptr @int end
inline proc proc-set  int        in proc-index @int sizeof(int) * proc-layers +ptr !int end
inline proc proc-iota int -- int in proc-set   proc-index @int proc-index inc64 end

memory ifstar-layers  sizeof(int) sizeof(int) * 8 * end
memory ifstar-current sizeof(int) end

inline proc @ifstar-count -- int in ifstar-layers ifstar-current @int sizeof(int) * ptr+ @int end
inline proc !ifstar-count    int in ifstar-layers ifstar-current @int sizeof(int) * ptr+ !int end
inline proc ifstar-count.inc     in @ifstar-count 1 + !ifstar-count end
inline proc ifstar-count.dec     in @ifstar-count 1 - !ifstar-count end

proc generate-op-wat
  int // ip
  ptr // bfd
in
  let ip bfd in
    skip-op @int 0 > if
      skip-op dec64
    else
      ip sizeof(Op) * ops +ptr
      let op in
        op Op.type ptr+ @int
        op Op.operand ptr+ @int
        let type operand in
          assert "Exhaustive handling of Op types in generate-op-wat" COUNT_OPS 25 = end
          skip-inline @bool  if
          else type OP_RET = if*
             ")" bfd bputs
          else type OP_PUSH_INT = if*
             " i32.const "   bfd bputs operand bfd bputu
             " call $push"   bfd bputs
          else type OP_PUSH_BOOL = if*
             " i32.const "   bfd bputs operand bfd bputu
             " call $push"   bfd bputs
          else type OP_PUSH_PTR = if*
             " i32.const "   bfd bputs operand bfd bputu
             " call $push"   bfd bputs
          else type OP_PUSH_ADDR = if*
             " i32.const "   bfd bputs
             proc-index @int while dup 0 >= over proc-get operand != land do
              1 -
             end bfd bputu
             " call $push"   bfd bputs
            //  here puts ": FIXME: not implemented yet\n" puts
            //  1 exit
          else type OP_CALL_LIKE = if*
             " call $pop"              bfd bputs
             " call_indirect (type 0)" bfd bputs
            //  here puts ": FIXME: not implemented yet\n" puts
            //  1 exit
          else type OP_BIND_LET = if*
             here puts ": FIXME: not implemented yet\n" puts
             1 exit
          else type OP_BIND_PEEK = if*
             here puts ": FIXME: not implemented yet\n" puts
             1 exit
          else type OP_UNBIND = if*
             here puts ": FIXME: not implemented yet\n" puts
             1 exit
          else type OP_PUSH_BIND = if*
             here puts ": FIXME: not implemented yet\n" puts
             1 exit
          else type OP_PUSH_LOCAL_MEM = if*
             1 while dup ip + sizeof(Op) * ops +ptr Op.type ptr+ @int OP_INLINED = do
               skip-op inc64
               1 +
             end
             ip + sizeof(Op) * ops +ptr 
             let nextOp in
              nextOp Op.type ptr+ @int OP_INTRINSIC = if
                nextOp Op.operand ptr+ @int 
                  dup INTRINSIC_STORE32 =  
                  over INTRINSIC_STORE64 = lor
                  over INTRINSIC_STORE16 = lor
                  over INTRINSIC_STORE8 = lor if drop
                    skip-op inc64
                    " call $pop"    bfd bputs 
                    " local.set "   bfd bputs operand sizeof(u64) / bfd bputu
                else
                  dup INTRINSIC_LOAD32 =  
                  over INTRINSIC_LOAD64 = lor
                  over INTRINSIC_LOAD16 = lor
                  swap INTRINSIC_LOAD8 = lor if
                    skip-op inc64
                  else 0 skip-op !int end 
                  " local.get "   bfd bputs operand sizeof(u64) / bfd bputu
                  " call $push"   bfd bputs
                end
              else 0 skip-op !int end
             end
          else type OP_PUSH_GLOBAL_MEM = if*
             " i32.const "      bfd bputs operand bfd bputu
             " i32.const "      bfd bputs wat-global-mem @int bfd bputu
             " i32.add"         bfd bputs 
             " call $push"      bfd bputs
          else type OP_PUSH_STR = if*
             " i32.const "      bfd bputs op Op.token ptr+ Token.value ptr+ @Str drop bfd bputu
             " call $push"      bfd bputs
             " global.get $str" bfd bputs operand bfd bputu
             " call $push"      bfd bputs
          else type OP_PUSH_CSTR = if*
             " global.get $str" bfd bputs operand bfd bputu
             " call $push"      bfd bputs
          else type OP_IF = if*
              ifstar-current inc64
             " call $pop"       bfd bputs
             " if"              bfd bputs
          else type OP_IFSTAR = if*
             ifstar-count.inc
             " call $pop"       bfd bputs
             " if"              bfd bputs
          else type OP_ELSE = if*
             " else"            bfd bputs
          else type OP_END_WHILE = if*
             " br $"            bfd bputs operand 1 + bfd bputu
             " end"             bfd bputs
             " end"             bfd bputs
          else type OP_END_IF = if*
             while @ifstar-count 0 > do
                " end" bfd bputs
                ifstar-count.dec
             end ifstar-current dec64

             " end"             bfd bputs
          else type OP_WHILE = if*
             " block $while"    bfd bputs 
             " loop $"          bfd bputs operand bfd bputu
          else type OP_DO = if*
             " call $pop"       bfd bputs
             " i32.eqz"         bfd bputs
             " br_if $while"    bfd bputs
          else type OP_PREP_PROC = if*
              op Op.token ptr+ Token.text ptr+ dup @Str proc-lookup-by-name
              let name prok in
                prok NULL ptr= if
                  here eputs ": Assertion Failed: couldn't find proc name by token text" eputs
                  1 exit
                end

                prok Proc.inlinable ptr+ @bool 
                prok Proc.imported  ptr+ @bool lor 
                prok Proc.name ptr+ @Str "rnd" streq lor if
                  true skip-inline !bool
                else
                  false skip-inline !bool
                  "\n(elem (i32.const " bfd bputs ip proc-iota bfd bputu 
                  ") $f"                bfd bputs ip bfd bputu 
                  ")\n(func $f"         bfd bputs ip bfd bputu
                  operand 0 > if
                    " (local"           bfd bputs 
                    operand 0 while over over > do
                      " i32"            bfd bputs
                      sizeof(u64) +
                    end drop drop
                    ")"                 bfd bputs
                  end
                end
              end
          else type OP_CALL = if*
              op Op.token ptr+ Token.text ptr+ @Str proc-lookup-by-name
              let prok in
                prok NULL ptr= if
                  here eputs ": Assertion Failed: couldn't find proc name by token text" eputs
                  1 exit
                end
                prok Proc.imported ptr+ @bool if
                  prok Proc.ins ptr+
                  TypeStack.top ptr+ @ptr 
                  dup NULL ptr!= if
                    while dup NULL ptr!= do
                      " call $pop" bfd bputs
                      TypeFrame.prev ptr+ @ptr
                    end drop
                  else drop end
                end
                " call $f" bfd bputs
                prok Proc.name ptr+ @Str "rnd" streq if
                  "rnd"   bfd bputs
                else
                  operand bfd bputu
                end
              end
          else type OP_INLINED = if*
          else type OP_INTRINSIC = if*
              assert "Exhaustive handling of Intrinsics in generate-op-wat"
                COUNT_INTRINSICS 47 =
              end

              operand INTRINSIC_PLUS = if
                  " call $pop"         bfd bputs
                  " call $pop"         bfd bputs
                  " i32.add"           bfd bputs
                  " call $push"        bfd bputs
              else operand INTRINSIC_MINUS = if*
                  " call $swap"        bfd bputs
                  " call $pop"         bfd bputs
                  " call $pop"         bfd bputs
                  " i32.sub"           bfd bputs
                  " call $push"        bfd bputs
              else operand INTRINSIC_MUL = if*
                  " call $pop"         bfd bputs
                  " call $pop"         bfd bputs
                  " i32.mul"           bfd bputs
                  " call $push"        bfd bputs
              else operand INTRINSIC_DIVMOD = if*
                  " call $divmod"     bfd bputs
              else operand INTRINSIC_IDIVMOD = if*
                  " call $divmod"     bfd bputs
              else operand INTRINSIC_MAX = if*
                  " call $pop"         bfd bputs
                  " f32.convert_i32_u" bfd bputs
                  " call $pop"         bfd bputs
                  " f32.convert_i32_u" bfd bputs
                  " f32.max "          bfd bputs
                  " i32.trunc_f32_u"   bfd bputs
                  " call $push"        bfd bputs
              else operand INTRINSIC_SHR = if*
                  " call $swap"        bfd bputs
                  " call $pop"         bfd bputs
                  " call $pop"         bfd bputs
                  " i32.shr_u"         bfd bputs
                  " call $push"        bfd bputs
              else operand INTRINSIC_SHL = if*
                  " call $swap"        bfd bputs
                  " call $pop"         bfd bputs
                  " call $pop"         bfd bputs
                  " i32.shl"           bfd bputs
                  " call $push"        bfd bputs
              else operand INTRINSIC_OR = if*
                  " call $pop"         bfd bputs
                  " call $pop"         bfd bputs
                  " i32.or"            bfd bputs
                  " call $push"        bfd bputs
              else operand INTRINSIC_AND = if*
                  " call $pop"         bfd bputs
                  " call $pop"         bfd bputs
                  " i32.and"           bfd bputs
                  " call $push"        bfd bputs
              else operand INTRINSIC_XOR = if*
                  " call $pop"         bfd bputs
                  " call $pop"         bfd bputs
                  " i32.xor"           bfd bputs
                  " call $push"        bfd bputs
              else operand INTRINSIC_NOT = if*
                  " call $pop"         bfd bputs
                  " if"                bfd bputs
                  " i32.const 0"       bfd bputs
                  " call $push"        bfd bputs
                  " else"              bfd bputs
                  " i32.const 1"       bfd bputs
                  " call $push"        bfd bputs
                  " end\n"             bfd bputs
              else operand INTRINSIC_PRINT = if*
                  " call $pop"         bfd bputs
                  " call $f"           bfd bputs
                  "trace"              proc-lookup-by-name 
                  Proc.addr ptr+ @int  bfd bputu
              else operand INTRINSIC_EQ = if*
                  " call $pop"         bfd bputs
                  " call $pop"         bfd bputs
                  " i32.eq"            bfd bputs
                  " call $push"        bfd bputs
              else operand INTRINSIC_GT = if*
                  " call $swap"        bfd bputs
                  " call $pop"         bfd bputs
                  " call $pop"         bfd bputs
                  " i32.gt_u"          bfd bputs
                  " call $push"        bfd bputs
              else operand INTRINSIC_LT = if*
                  " call $swap"        bfd bputs
                  " call $pop"         bfd bputs
                  " call $pop"         bfd bputs
                  " i32.lt_u"          bfd bputs
                  " call $push"        bfd bputs
              else operand INTRINSIC_GE = if*
                  " call $swap"        bfd bputs
                  " call $pop"         bfd bputs
                  " call $pop"         bfd bputs
                  " i32.ge_u"          bfd bputs
                  " call $push"        bfd bputs
              else operand INTRINSIC_LE = if*
                  " call $swap"        bfd bputs
                  " call $pop"         bfd bputs
                  " call $pop"         bfd bputs
                  " i32.le_u"          bfd bputs
                  " call $push"        bfd bputs
              else operand INTRINSIC_NE = if*
                  " call $pop"         bfd bputs
                  " call $pop"         bfd bputs
                  " i32.ne"            bfd bputs
                  " call $push"        bfd bputs
              else operand INTRINSIC_DUP = if*
                  " call $dup"         bfd bputs
              else operand INTRINSIC_SWAP = if*
                  " call $swap"        bfd bputs
              else operand INTRINSIC_DROP = if*
                  " call $drop"        bfd bputs
              else operand INTRINSIC_OVER = if*
                  " call $over"        bfd bputs
              else operand INTRINSIC_ROT = if*
                  " call $rot"         bfd bputs
              else operand INTRINSIC_LOAD8 = if*
                  " call $pop"         bfd bputs
                  " i32.load8_u"       bfd bputs
                  " call $push"        bfd bputs
              else operand INTRINSIC_STORE8 = if*
                  " call $pop"         bfd bputs
                  " call $pop"         bfd bputs
                  " i32.store8"        bfd bputs
              else operand INTRINSIC_LOAD16 = if*
                  " call $pop"         bfd bputs
                  " i32.load16_u"      bfd bputs
                  " call $push"        bfd bputs
              else operand INTRINSIC_STORE16 = if*
                  " call $pop"         bfd bputs
                  " call $pop"         bfd bputs
                  " i32.store16"       bfd bputs
              else operand INTRINSIC_LOAD32 = if*
                  " call $pop"         bfd bputs
                  " i32.load"          bfd bputs
                  " call $push"        bfd bputs
              else operand INTRINSIC_STORE32 = if*
                  " call $pop"         bfd bputs
                  " call $pop"         bfd bputs
                  " i32.store"         bfd bputs
              else operand INTRINSIC_LOAD64 = if*
                  " call $pop"         bfd bputs
                  " i32.load"          bfd bputs
                  " call $push"        bfd bputs
              else operand INTRINSIC_STORE64 = if*
                  " call $pop"         bfd bputs
                  " call $pop"         bfd bputs
                  " i32.store"         bfd bputs
              else operand INTRINSIC_ARGC = if*
              else operand INTRINSIC_ARGV = if*
              else operand INTRINSIC_ENVP = if*
              else operand INTRINSIC_CAST_PTR = if*
              else operand INTRINSIC_CAST_INT = if*
              else operand INTRINSIC_CAST_BOOL = if*
              else operand INTRINSIC_CAST_ADDR = if*
              else operand INTRINSIC_SYSCALL0 = if*
              else operand INTRINSIC_SYSCALL1 = if*
              else operand INTRINSIC_SYSCALL2 = if*
              else operand INTRINSIC_SYSCALL3 = if*
              else operand INTRINSIC_SYSCALL4 = if*
              else operand INTRINSIC_SYSCALL5 = if*
              else operand INTRINSIC_SYSCALL6 = if*
              else operand INTRINSIC_??? = if*
              else
                here eputs ": unreachable. Invalid intrinsic.\n" eputs
                1 exit
              end
          else
            here eputs ": unreachable. Invalid op.\n" eputs
            1 exit
          end
          skip-inline @bool if
            type OP_RET = if
              false skip-inline !bool
            end
          else
            op bfd generate-op-comment
            // "\n" bfd bputs
          end
        end
      end
    end
  end
end

proc generate-wat-imports
  int // ip
  ptr // bfd
in
  over sizeof(Op) * ops +ptr Op.type ptr+ @int OP_PREP_PROC = if
    let ip bfd in
      ip sizeof(Op) * ops +ptr Op.token ptr+ Token.text ptr+ dup @Str 
      proc-lookup-by-name
      let name prok in
        prok NULL ptr= if
          here eputs ": Assertion Failed: couldn't find proc name by token text" eputs
          1 exit
        end
        prok Proc.imported ptr+ @bool if
          "(import \"env\" \"" bfd bputs
          name @Str            bfd bputs
          "\" (func $f"        bfd bputs ip bfd bputu
          prok Proc.ins ptr+
          TypeStack.top ptr+ @ptr
          dup NULL ptr!= if
            " (param"         bfd bputs
            while dup NULL ptr!= do
              " i32"          bfd bputs
              TypeFrame.prev ptr+ @ptr
            end drop
            ")"               bfd bputs
          else drop end
          "))\n"              bfd bputs
        end
      end 
    end
  else drop drop end
end

proc generate-wat
  ptr // file-path
in
  memory char-counter sizeof(int) end
  0 char-counter !int

  memory bfd sizeof(Bfd) end
  sizeof(Bfd) 0 bfd memset drop

  let file-path in
    silent @bool lnot if
      "[INFO] Generating "  puts
      file-path cstr-to-str puts
      "\n"                  puts
    end

    420                            // mode
    O_CREAT O_WRONLY or O_TRUNC or // flags
    file-path                      // pathname
    AT_FDCWD
    openat

    BFD_CAP tmp-alloc
    let fd buff in
      fd   bfd Bfd.fd  ptr+ !int
      buff bfd Bfd.buff ptr+ !ptr

      fd 0 < if
        "[ERROR] could not open file\n" eputs
        1 exit
      end

      "(import \"env\" \"memory\" (memory 1))\n" bfd bputs

      0 while dup ops-count @64 < do
        dup bfd generate-wat-imports
        1 +
      end drop

      "\n(global $DATA_STACK i32 (i32.const " bfd bputs wat-porth-stack bfd bputu "))\n" bfd bputs

      0 while dup strlits-count @64 < do
        let i in
          i sizeof(Str) * strlits +ptr
          let str in
            str ?str-empty lnot if
              "(global $str"     bfd bputs i bfd bputu
              " i32 (i32.const " bfd bputs
              char-counter @int  wat-string-section + bfd bputu
              "))\n"             bfd bputs
              char-counter @int  str @Str drop + char-counter !int
            end
          end
          i 1 +
        end
      end drop

      wat-string-section
      char-counter @int
      64 / 1 + 64 * + 
      wat-global-mem !int

      global-memory-capacity @int wat-global-mem @int + wat-porth-stack > if
        "[ERROR] global memory size exceeds the limits\n" eputs
        "[INFO] use ./4orth summary to view more details\n" puts
        1 exit
      end

      "\n(func $dup (local i32)\n"                     bfd bputs
      "  call $pop  local.tee 0\n"                     bfd bputs
      "  call $push local.get 0\n"                     bfd bputs
      "  call $push)\n\n"                              bfd bputs
      "(func $swap (local i32)\n"                      bfd bputs
      "  call $pop\n"                                  bfd bputs
      "  call $pop  local.set 0\n"                     bfd bputs
      "  call $push local.get 0\n"                     bfd bputs
      "  call $push)\n\n"                              bfd bputs
      "(func $over (local i32 i32)\n"                  bfd bputs
      "  call $pop  local.set 1\n"                     bfd bputs
      "  call $pop  local.tee 0\n"                     bfd bputs
      "  call $push local.get 1\n"                     bfd bputs
      "  call $push local.get 0\n"                     bfd bputs
      "  call $push)\n\n"                              bfd bputs
      "(func $drop call $pop drop)\n\n"                bfd bputs
      "(func $rot (local i32)\n"                       bfd bputs
      "  call $pop\n"                                  bfd bputs
      "  call $pop\n"                                  bfd bputs
      "  call $pop  local.set 0\n"                     bfd bputs
      "  call $push\n"                                 bfd bputs
      "  call $push local.get 0\n"                     bfd bputs
      "  call $push)\n\n"                              bfd bputs
      "(func $push (param i32)  (local $offset i32)\n" bfd bputs
      "  global.get  $DATA_STACK \n"                   bfd bputs
      "  global.get  $DATA_STACK i32.load\n"           bfd bputs
      "  local.tee   $offset \n"                       bfd bputs
      "  i32.const 4 i32.add     i32.add\n"            bfd bputs
      "  local.get 0 \n"                               bfd bputs
      "  i32.store\n"                                  bfd bputs
      "  global.get  $DATA_STACK\n"                    bfd bputs
      "  local.get   $offset \n"                       bfd bputs
      "  i32.const 4 i32.add\n"                        bfd bputs
      "  i32.store)\n\n"                               bfd bputs
      "(func $pop (result i32) (local $offset i32)\n"  bfd bputs
      "  global.get  $DATA_STACK \n"                   bfd bputs
      "  global.get  $DATA_STACK i32.load\n"           bfd bputs
      "  local.tee   $offset\n"                        bfd bputs
      "  i32.add     i32.load\n"                       bfd bputs
      "  global.get  $DATA_STACK\n"                    bfd bputs
      "  local.get   $offset \n"                       bfd bputs
      "  i32.const 4 i32.sub\n"                        bfd bputs
      "  i32.store)\n\n"                               bfd bputs
      "(func $divmod (local i32 i32)\n"                bfd bputs
      "  call $swap\n"                                 bfd bputs
      "  call $pop   local.tee 0\n"                    bfd bputs
      "  call $pop   local.tee 1\n"                    bfd bputs
      "  i32.rem_u\n"                                  bfd bputs
      "  local.get 0 local.get 1\n"                    bfd bputs
      "  i32.div_u\n"                                  bfd bputs
      "  call $push call $push)\n"                     bfd bputs

      "main" proc-lookup-by-name
      let main-proc in
        main-proc NULL ptr= if
          here eputs ": Assertion Failed: type checking phase did not check the existence of `main` procedure\n" eputs
          1 exit
        end

        "\n(func (export \"start\")\n" bfd bputs
        "  call $f"                    bfd bputs
        main-proc Proc.addr ptr+ @int  bfd bputu
        "\n)\n"                        bfd bputs
      end

      "update" proc-lookup-by-name
      let update-proc in
        update-proc NULL ptr= if
          here eputs ": Assertion Failed: `update` procedure is missing\n" eputs
          1 exit
        end

        "\n(func (export \"update\")\n" bfd bputs
        "  call $f"                     bfd bputs
        update-proc Proc.addr ptr+ @int bfd bputu
        "\n)\n"                       bfd bputs
      end

      "rnd" proc-lookup-by-name
      let prok in
        prok NULL ptr= lnot if 
        "\n(global $random-state (mut i32) (i32.const 69420))\n" bfd bputs
        "\n(func $frnd (local i32)\n"        bfd bputs
        "  global.get   $random-state\n"     bfd bputs
        "  local.tee 0  local.get 0\n"       bfd bputs
        "  i32.const 13 i32.shl\n"           bfd bputs
        "  i32.xor      local.tee 0\n"       bfd bputs
        "  local.get 0  i32.const 17\n"      bfd bputs
        "  i32.shr_u    i32.xor\n"           bfd bputs
        "  local.tee 0  local.get 0\n"       bfd bputs
        "  i32.const 5  i32.shl\n"           bfd bputs
        "  i32.xor      local.tee 0\n"       bfd bputs
        "  global.set   $random-state\n"     bfd bputs
        "  local.get 0  i32.const 8\n"       bfd bputs
        "  i32.shr_u    f32.convert_i32_u\n" bfd bputs
        "  f32.const 0x1p-24 f32.mul\n"      bfd bputs
        "  call $pop    f32.convert_i32_u\n" bfd bputs
        "  f32.mul      i32.trunc_f32_u\n"   bfd bputs
        "  call $push)\n"                    bfd bputs
        end
      end
      
      0 ifstar-current !int
      0 while dup ops-count @64 < do
        dup bfd generate-op-wat
        1 +
      end drop
      
      "\n(table "        bfd bputs 
      proc-index @64 1 - bfd bputu 
      " funcref)\n"      bfd bputs

      strlits-count @64 0 > if
        "\n(data (i32.const " bfd bputs wat-string-section bfd bputu ")\n" bfd bputs
        
        0 while dup strlits-count @64 < do
          let i in
            i sizeof(Str) * strlits +ptr
            let str in
              str ?str-empty lnot if
                "  "     bfd bputs
                str @Str bfd bputwatstr
              end
            end
            "\n" bfd bputs
            i 1 +
          end
        end drop
        ")" bfd bputs
      end

      bfd bflush
      fd close drop
      buff tmp-rewind
    end
  end
end

proc usage
  ptr // program name
  int // fd
in
  let name fd in
    "Usage: " eputs name cstr-to-str puts " [OPTIONS] <SUBCOMMAND>\n"                          fd fputs
    "  OPTIONS:\n"                                                                             fd fputs
    "    -unsafe               Disable type checking.\n"                                       fd fputs
    "    -I <path>             Add <path> to the include paths list.\n"                        fd fputs
    "  SUBCOMMANDS:\n"                                                                         fd fputs
    "    com [OPTIONS] <file>  Compile the program\n"                                          fd fputs
    "      OPTIONS:\n"                                                                         fd fputs
    // TODO: implement -o flag for com subcommand
    "        -r                Run the program after successful compilation\n"                 fd fputs
    "        -b                Bundles the program to a linux executable. (If with -r, executes the bundle)\n" fd fputs
    "        -opt              Optimize the program with wasm-opt\n"                           fd fputs
    "        -wat              Transforms the labels stripped program back from `.wasm` to `.wat` \n"     fd fputs
    "        -s                Silent mode. Don't print any info about compilation phases\n"   fd fputs
    "    dump <file>           Dump the ops of the program\n"                                  fd fputs
    "    lex <file>            Produce lexical analysis of the file\n"                         fd fputs
    "    summary <file>        Print the summary of the program\n"                             fd fputs
    "    help                  Print this help to stdout and exit with 0 code\n"               fd fputs
  end
end

proc main in
  // Default include paths
  "."     include-paths-add
  "./std" include-paths-add

  memory args sizeof(ptr) end
  argv args !ptr

  memory program sizeof(ptr) end
  args @@ptr program !ptr

  memory unsafe sizeof(bool) end
  false unsafe !bool

  while
    args sizeof(ptr) inc64-by
    args @@ptr NULL ptr= if
      false // break
    else args @@ptr "-unsafe"c cstreq if*
      true unsafe !bool
      true  // continue
    else args @@ptr "-I"c cstreq if*
      args sizeof(ptr) inc64-by
      args @@ptr
        dup ?null if
          "ERROR: no argument is provided for -I flag\n" eputs
          1 exit
        end
        dup cstr-to-str include-paths-add
      drop
      true // continue
    else
      false // break
    end
  do end

  args @@ptr NULL ptr= if
    program @ptr stderr usage
    "ERROR: subcommand is not provided\n" eputs
    1 exit
  end

  memory input-file-path-cstr sizeof(ptr) end
  NULL input-file-path-cstr !ptr
  memory base-file-path sizeof(Str) end
  0 NULL base-file-path !Str
  memory run sizeof(bool) end
  false run !bool
  memory optimize sizeof(bool) end
  false optimize !bool
  memory wasm2wat sizeof(bool) end
  false wasm2wat !bool
  memory bundle sizeof(bool) end
  false bundle !bool

  args @@ptr "com"c cstreq if
    while
      args sizeof(ptr) inc64-by
      args @@ptr NULL ptr= if
        false // break
      else args @@ptr "-r"c cstreq if*
        true run !bool
        true  // continue
      else args @@ptr "-s"c cstreq if*
        true silent !bool
        true  // continue
      else args @@ptr "-b"c cstreq if*
        true bundle !bool
        true  // continue
      else args @@ptr "-opt"c cstreq if*
        true optimize !bool
        true  // continue
      else args @@ptr "-wat"c cstreq if*
        true wasm2wat !bool
        true  // continue
      else
        args @@ptr input-file-path-cstr !ptr
        args sizeof(ptr) inc64-by
        false // break
      end
    do end

    input-file-path-cstr @ptr NULL ptr= if
      program @ptr stderr usage
      "[ERROR] no input file is provided for the compilation.\n" eputs
      1 exit
    end

    input-file-path-cstr @ptr cstr-to-str remove-ext base-file-path !Str
    base-file-path @Str dirname append-std include-paths-add

    input-file-path-cstr @ptr compile-program-into-ops
    unsafe @bool lnot if type-check-program end

    timeit/from-here
      fpb-end
        base-file-path @Str fpb-append drop
        ".wat"              fpb-append drop
        1                   fpb-alloc  drop
        dup generate-wat
      fpb-rewind
    "[INFO] Generation" silent @bool timeit/to-here

    timeit/from-here
      cmd-dev-null-stdout @bool
        silent @bool cmd-dev-null-stdout !bool
        fpb-end
          tmp-end
          "wat2wasm"c           tmp-append-ptr
          fpb-end
            base-file-path @Str fpb-append drop
            ".wat"              fpb-append drop
            1                   fpb-alloc  drop
            tmp-append-ptr
          "-o"c                 tmp-append-ptr
          fpb-end
            base-file-path @Str fpb-append drop
            ".wasm"             fpb-append drop
            1                   fpb-alloc  drop
            tmp-append-ptr
          NULL          tmp-append-ptr
          silent @bool lnot cmd-echoed
        fpb-rewind
      cmd-dev-null-stdout !bool
    "[INFO] wat2wasm" silent @bool timeit/to-here

    optimize @bool if
      fpb-end
        tmp-end
        "wasm-opt"c             tmp-append-ptr
        "-Oz"c                  tmp-append-ptr
        fpb-end
          base-file-path @Str fpb-append drop
          ".wasm"             fpb-append drop
          1                   fpb-alloc  drop
          tmp-append-ptr
          "-o"c                 tmp-append-ptr
          fpb-end
          base-file-path @Str fpb-append drop
          ".wasm"             fpb-append drop
          1                   fpb-alloc  drop
          tmp-append-ptr
        NULL          tmp-append-ptr
        silent @bool lnot cmd-echoed
      fpb-rewind
    end

    wasm2wat @bool if
      fpb-end
        tmp-end
        "wasm2wat"c             tmp-append-ptr
        fpb-end
          base-file-path @Str fpb-append drop
          ".wasm"              fpb-append drop
          1                   fpb-alloc  drop
          tmp-append-ptr
          "-o"c                 tmp-append-ptr
          fpb-end
          base-file-path @Str fpb-append drop
          ".wat"              fpb-append drop
          1                   fpb-alloc  drop
          tmp-append-ptr
        NULL          tmp-append-ptr
        silent @bool lnot cmd-echoed
      fpb-rewind
    end

    bundle @bool if
      fpb-end
        tmp-end
        "w4"c                  tmp-append-ptr
        "bundle"c              tmp-append-ptr
        "--linux"c             tmp-append-ptr
        fpb-end
          base-file-path @Str fpb-append drop
          1                   fpb-alloc  drop
          tmp-append-ptr
        fpb-end
          base-file-path @Str fpb-append drop
          ".wasm"             fpb-append drop
          1                   fpb-alloc  drop
          tmp-append-ptr
        NULL          tmp-append-ptr
        silent @bool lnot cmd-echoed
      fpb-rewind

      run @bool if
        fpb-end 
          tmp-end
          fpb-end
          base-file-path @Str fpb-append drop
          1                   fpb-alloc  drop
          tmp-append-ptr
          NULL          tmp-append-ptr
          silent @bool lnot cmd-echoed
        fpb-rewind
      end
    else run @bool if*
      fpb-end
        tmp-end
        "w4"c                 tmp-append-ptr
        "run"c                tmp-append-ptr
        fpb-end
          base-file-path @Str fpb-append drop
          ".wasm"             fpb-append drop
          1                   fpb-alloc  drop
          tmp-append-ptr
        NULL          tmp-append-ptr
        silent @bool lnot cmd-echoed
      fpb-rewind
    end

  else args @@ptr "help"c cstreq if*
    program @ptr stdout usage
    0 exit
  else args @@ptr "dump"c cstreq if*
    args sizeof(ptr) inc64-by
    args @@ptr NULL ptr= if
      program @ptr stderr usage
      "ERROR: no input file is provided for the `dump` subcommand\n" eputs
      1 exit
    end

    args @@ptr compile-program-into-ops
    unsafe @bool lnot if type-check-program end

    dump-ops
  else args @@ptr "lex"c cstreq if*
    args sizeof(ptr) inc64-by
    args @@ptr NULL ptr= if
      program @ptr stderr usage
      "ERROR: no input file is provided for the `lex` subcommand\n" eputs
      1 exit
    end

    args @@ptr lex-file
  else args @@ptr "summary"c cstreq if*
    args sizeof(ptr) inc64-by
    args @@ptr NULL ptr= if
      program @ptr stderr usage
      "ERROR: no input file is provided for the `dump` subcommand\n" eputs
      1 exit
    end

    args @@ptr compile-program-into-ops
    unsafe @bool lnot if type-check-program end

    summary
  else
    program @ptr stderr usage
    "ERROR: unknown subcommand `" eputs args @@ptr cstr-to-str eputs "`\n" eputs
    1 exit
  end
end
