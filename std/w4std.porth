include "wasm4.porth"

proc cstrlen ptr -- int in
  dup
  while dup @8 0 != do 1 ptr+ end
  swap ptr-diff
end

proc cstreq ptr ptr -- bool in
  while
    peek s1 s2 in
      s1 @8 0 != s2 @8 0 != land if
         s1 @8 s2 @8 =
      else false end
    end
  do
    let s1 s2 in
      s1 1 ptr+
      s2 1 ptr+
    end
  end

  let s1 s2 in
    s1 @8 0 =
    s2 @8 0 =
    land
  end
end

inline proc cstr-to-str ptr -- int ptr in dup cstrlen swap end

const offsetof(Str.count) sizeof(u64) offset end
const offsetof(Str.data) sizeof(ptr) offset end
const sizeof(Str) reset end

inline proc Str.count ptr -- ptr in offsetof(Str.count) ptr+ end
inline proc Str.data ptr -- ptr in offsetof(Str.data) ptr+ end
inline proc @Str.count ptr -- int in Str.count @64 end
inline proc @Str.data ptr -- ptr in Str.data  @64 cast(ptr) end
inline proc !Str.count int ptr in Str.count !64 end
inline proc !Str.data ptr ptr in Str.data  !64 end

inline proc @Str ptr -- int ptr in
  let s in
    s @Str.count
    s @Str.data
  end
end

inline proc !Str int ptr ptr in
  let n s p in
    n p !Str.count
    s p !Str.data
  end
end

inline proc str-null -- int ptr in 0 NULL end

inline proc str-chop-one-left ptr in
   dup Str.count dec64
       Str.data inc64
end

inline proc str-chop-one-right ptr in
  Str.count dec64
end

proc ?space int -- bool in
  let x in
    x ' '  =
    x '\n' = lor
    x '\r' = lor
  end
end

proc str-chop-by-predicate
  addr // predicate
  ptr // dst
  ptr // src
in
  memory predicate sizeof(addr) end
  rot predicate !addr
  over over @Str.data swap !Str.data
  over 0 swap !Str.count
  while
    dup @Str.count 0 > if
       dup @Str.data @8 predicate @addr call-like ?space lnot
    else false end
  do
    dup str-chop-one-left
    swap dup Str.count inc64 swap
  end
  dup @Str.count 0 > if
    dup str-chop-one-left
  end
  drop drop
end

proc streq
  int ptr
  int ptr
  --
  bool
in
  let n s1 m s2 in
    n m = if
      n s1 s2
      while
        peek n s1 s2 in
          n 0 > if
            s1 @8 s2 @8 =
          else false end
        end
      do
        let n s1 s2 in
          n  1 -
          s1 1 ptr+
          s2 1 ptr+
        end
      end

      let n _ _ in n 0 <= end
    else false end
  end
end

proc str-trim-left ptr in // input --
  while
    dup @Str.count 0 > if
      dup @Str.data @8 ?space
    else false end
  do
    dup str-chop-one-left
  end
  drop
end

inline proc ?str-empty ptr -- bool in
  offsetof(Str.count) ptr+
  @64
  0 =
end

inline proc puts int ptr in traceUtf8 end

const PUTU_BUFFER_CAP 32 end
proc putu
  int // number
in
  memory buffer PUTU_BUFFER_CAP end
  dup 0 = if
    "0" puts
  else
    buffer PUTU_BUFFER_CAP ptr+
    while over 0 != do
      1 ptr- dup rot
      10 divmod
      rot swap '0' + swap !8 swap
    end

    dup
    buffer PUTU_BUFFER_CAP ptr+ swap ptr-diff swap puts
  end
  drop
end

proc puti
  int // number
in
  let number in
    number 0 < if
      "-" puts
      number not 1 +
    else
      number
    end
    putu
  end
end

proc memcpy
  int // size
  ptr // src
  ptr // dst
  --
  ptr // dst
in
  memory src sizeof(ptr) end
  memory dst sizeof(ptr) end
  memory result sizeof(ptr) end
  dst !64
  src !64
  dst @ptr swap // result
  while dup 0 > do
    src @ptr @8
    dst @ptr !8
    src inc64
    dst inc64
    1 -
  end drop
end

proc memset
  int // size
  int // byte
  ptr // data
  --
  ptr // data
in
  memory data sizeof(ptr) end
  data !64
  memory byte sizeof(u64) end
  byte !64
  data @ptr swap
  while dup 0 > do
    byte @64 data @ptr !8
    data inc64
    1 -
  end
  drop
end

/// Appends an item to a fixed size array
/// returns `true` when succeeds, `false` when overflow
proc append-item
  int // item size
  ptr // item
  int // array capacity
  ptr // array
  ptr // array count
  --
  int  // index of the appended item
  bool // true - appended, false - not enough space
in
  memory count sizeof(ptr) end
  count !ptr
  memory array sizeof(ptr) end
  array !ptr

  count @ptr @int > if
    over
    count @ptr @int *
    array @ptr +ptr
    memcpy drop

    count @ptr @int
    count @ptr inc64

    true
  else
    drop drop
    0 false
  end
end