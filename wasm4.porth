//
// WASM-4: https://wasm4.org/docs

include "core.porth"

// ┌───────────────────────────────────────────────────────────────────────────┐
// │                                                                           │
// │ Drawing Functions                                                         │
// │                                                                           │
// └───────────────────────────────────────────────────────────────────────────┘
// Copies pixels to the framebuffer.
import proc blit int int int int int ptr in end

// Copies a subregion within a larger sprite atlas to the framebuffer.
import proc blitSub int int int int int int int int ptr in end

// Draws a line between two points.
import proc line int int int int in end

// Draws a horizontal line.
import proc hline int int int in end

// Draws a vertical line.
import proc vline int int int in end

// Draws an oval (or circle).
import proc oval int int int int in end

// Draws a rectangle.
import proc rect int int int int in end

// Draws text using the built-in system font.
import proc text int int ptr in end
import proc textUtf8 int int int int in end
import proc textUtf16 int int int int in end

// ┌───────────────────────────────────────────────────────────────────────────┐
// │                                                                           │
// │ Sound Functions                                                           │
// │                                                                           │
// └───────────────────────────────────────────────────────────────────────────┘
// Plays a sound tone.
import proc tone int int int int in end

// ┌───────────────────────────────────────────────────────────────────────────┐
// │                                                                           │
// │ Storage Functions                                                         │
// │                                                                           │
// └───────────────────────────────────────────────────────────────────────────┘
// Reads up to `size` bytes from persistent storage into the pointer `dest`.
import proc diskr int ptr in end

// Writes up to `size` bytes from the pointer `src` into persistent storage.
import proc diskw int ptr in end

// Prints a message to the debug console.
import proc trace ptr in end
import proc traceUtf8 int ptr in end
import proc traceUtf16 int ptr in end

// ┌───────────────────────────────────────────────────────────────────────────┐
// │                                                                           │
// │ Memory Addresses                                                          │
// │                                                                           │
// └───────────────────────────────────────────────────────────────────────────┘

const $MEM_BEGIN     4     offset end // unused 4 bytes
const $PALETTE0      4     offset end
const $PALETTE1      4     offset end
const $PALETTE2      4     offset end
const $PALETTE3      4     offset end
const $DRAW_COLORS   2     offset end
const $GAMEPAD1      1     offset end
const $GAMEPAD2      1     offset end
const $GAMEPAD3      1     offset end
const $GAMEPAD4      1     offset end
const $MOUSE_X       2     offset end
const $MOUSE_Y       2     offset end
const $MOUSE_BUTTONS 1     offset end
const $SYSTEM_FLAGS  1     offset end
const $RESERVED      128   offset end // Reserved bytes for future use
const $FRAMEBUFFER   6400  offset end
const $PORTH_MEM     54879 offset end // Start of Porth global mem
const $PORTH_STACK   4096  offset end // Reserved memory for Porth stack
const $PROGRAM_END          reset end // End of program memory

const $SYSTEM_PRESERVE_FRAMEBUFFER 1 end
const $SYSTEM_HIDE_GAMEPAD_OVERLAY 2 end

const $BUTTON_1      1 0 shl end
const $BUTTON_2      1 1 shl end // bits 2 and 3 are skipped
const $BUTTON_LEFT   1 4 shl end
const $BUTTON_RIGHT  1 5 shl end
const $BUTTON_UP     1 6 shl end
const $BUTTON_DOWN   1 7 shl end

const $MOUSE_LEFT    1 0 shl end
const $MOUSE_RIGHT   1 1 shl end
const $MOUSE_MIDDLE  1 2 shl end

const $BLIT_1BPP     0       end
const $BLIT_2BPP     1 0 shl end
const $BLIT_FLIP_X   1 1 shl end
const $BLIT_FLIP_Y   1 2 shl end
const $BLIT_ROTATE   1 3 shl end

const $TONE_PULSE1   0  end
const $TONE_PULSE2   1  end
const $TONE_TRIANGLE 2  end
const $TONE_NOISE    3  end
const $TONE_MODE1    0  end
const $TONE_MODE2    4  end
const $TONE_MODE3    8  end
const $TONE_MODE4    12 end

// Baked in random procedure. Returns a value between 1 and the given input.
proc rnd int -- int in end